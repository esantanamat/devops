name: Deployment of application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./3-Multi-Container-Application

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3

      
      - name: Generate .env file from secrets
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> app/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> app/.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> app/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> app/.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> app/.env

      
      - name: Copy .env file to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./3-Multi-Container-Application/app/.env"
          target: "~/3-Multi-Container-Application/app/"
          strip_components: 3

      
      - name: Copy Ansible playbook to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./3-Multi-Container-Application/infrastructure/provision.yml"
          target: "~/3-Multi-Container-Application/infrastructure/"
          strip_components: 3

     
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./3-Multi-Container-Application/docker-compose.yml"
          target: "~/3-Multi-Container-Application/"
          strip_components: 3

      
      - name: Copy inventory.ini to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./3-Multi-Container-Application/infrastructure/inventory.ini"
          target: "~/3-Multi-Container-Application/infrastructure/"
          strip_components: 3

      
      - name: Add EC2 host to known_hosts
        run: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts

      
      - name: Prepare private key for SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      
      - name: Replace placeholder with actual IP in inventory.ini
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "sed -i 's|ipaddress|${{ secrets.EC2_HOST }}|g' ~/3-Multi-Container-Application/infrastructure/inventory.ini"

      
      - name: Run Ansible Playbook on EC2 to install Docker and Docker Compose
        working-directory: ./3-Multi-Container-Application/infrastructure
        env:
              ANSIBLE_USER: ${{ secrets.EC2_USERNAME }}  
              ANSIBLE_HOST_KEY_CHECKING: False
        run: |
              ansible-playbook -i inventory.ini provision.yml --private-key private_key.pem -u ${{ secrets.EC2_USERNAME }}

      
      - name: SSH and Start Containers with Docker Compose
        run: |
          ssh -i private_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd ~/3-Multi-Container-Application && docker-compose up -d"
